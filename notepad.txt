
const [companyExpectedResource,] = useState<expectedResourceType>({ type: "company", companyId: params.id })
const companiesAuthResponse = useResourceAuth(companyExpectedResource)
const [resourceAuth,] = useAtom<resourceAuthType | undefined>(resourceAuthGlobal)

const authResponse = await ensureCanAccessResource({type: "clientRequests", clientRequestId:clientRequestId},resourceAuth, "u")



if (resourceAuth === undefined) throw new Error("not seeing auth")




if (seenMessage.type === "standard") {
    const seenMessageObj = seenMessage.data.updated

    if (seenMessageObj.type === "clientRequests") {
        //update locally
        refreshObjSet(prevRefreshObj => {
            return updateRefreshObj(prevRefreshObj, "clientRequests")
        })
    }
};





, {type: "all"}




    if (editing.checklistStarters === undefined) return
    loadStarterValues(activeScreen, {type: "specific", id: editing.checklistStarters.id})





  const searchDebounce = useRef<NodeJS.Timeout>()

    async function functionFetcher<T>(activeScreen: activeScreenType): Promise<T[]> {
        if (activeScreen === "checklistStarters") {
            return await getChecklistStarters(checklistStartersSearchObj.limit, checklistStartersSearchObj.offset) as T[]

        } else {
            throw new Error("sup")
        }
    }

    async function loadStarterValues() {
        if (activeScreen === undefined) return

        toast.success("loading starter values")

        function setSearchItemsOnSearchObj<T>(sentSearchObjSet: React.Dispatch<React.SetStateAction<searchObj<T>>>, searchItems: T[]) {
            sentSearchObjSet(prevSearchObj => {
                const newSearchObj = { ...prevSearchObj }

                newSearchObj.searchItems = searchItems

                return newSearchObj
            })
        }

        if (activeScreen === "checklistStarters") {
            setSearchItemsOnSearchObj(checklistStartersSearchObjSet, await functionFetcher<checklistStarter>("checklistStarters"))
        }
    }